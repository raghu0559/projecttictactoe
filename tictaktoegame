#include<bits/stdc++.h>
#define SIDE 3
#define COMPUTER 1
#define HUMAN 2
#define COMPUTERMOVE 'O'
#define HUMANMOVE 'X'
using namespace std;
void showBoard(char board[][SIDE])
{
    printf("\t\t\t %c | %c | %c \n", board[0][0], board[0][1], board[0][2]);
    printf("\t\t\t-----------\n");
    printf("\t\t\t %c | %c | %c \n", board[1][0], board[1][1], board[1][2]);
    printf("\t\t\t-----------\n");
    printf("\t\t\t %c | %c | %c \n\n", board[2][0], board[2][1], board[2][2]);
}
//SHOWING INSTRUCTION
void showInstructions(){
    printf("\nChoose a cell numbered from 1 to 9 as below and play\n\n");
    printf("\t\t\t 1 | 2 | 3 \n");
    printf("\t\t\t-----------\n");
    printf("\t\t\t 4 | 5 | 6 \n");
    printf("\t\t\t-----------\n");
    printf("\t\t\t 7 | 8 | 9 \n");


}

void initialise(char board[][SIDE])
{
// Initially the board to '*' as said
    for (int i=0; i<SIDE; i++)
    {
        for (int j=0; j<SIDE; j++){
            board[i][j]='*';
        }
    }
}
//printing winner
void declarewinner(int whoseturn){
    if(whoseturn==COMPUTER){
        printf("\nCOMPUTER WON\n");

    }
    else {
        printf("\nHUMAN WON\n");
    }
}
bool rowCrossed(char board[][SIDE]){
    for(int i=0;i<SIDE;i++){
        if(board[i][0]==board[i][1]&& board[i][1]==board[i][2]&& board[i][0]!='*'){
            return true;
        }


    }
    return false;

}
bool columnCrossed(char board[][SIDE]){
    for(int i=0;i<SIDE;i++){
        if(board[0][i]==board[1][i]&& board[1][i]==board[2][i]&& board[0][i]!='*'){
            return true;        
        }
    }
    return false;

}
bool diagonalCrossed(char board[][SIDE]){
    for(int i=0;i<SIDE;i++){
        if(board[0][0]==board[1][1]&& board[1][1]==board[2][2]&& board[0][0]!='*'){
            return true;
        }
        if(board[0][2]==board[1][1]&& board[1][1]==board[2][0]&&board[0][2]!='*'){
            return true;
        }
    }
    return false;

}
bool gameOver(char board[][SIDE]){
    return rowCrossed(board) ||columnCrossed(board) || diagonalCrossed(board);
}
int minimax(char board[][SIDE],int depth,bool isAi){
    int score = 0;
    int bestScore = 0;

    if(gameOver(board)==true){
        if(isAi==true){
            return -10;
        }
        if(isAi==false){
            return 10;
        }
    }
    else{
        if (depth < 9){
            if (isAi == true){
                bestScore = -999;
                for (int i=0;i<SIDE;i++){
                    for (int j=0;j<SIDE;j++){
                        if (board[i][j] == '*'){
                            board[i][j] = COMPUTERMOVE;
                            score = minimax(board, depth + 1, false);
                            board[i][j] = '*';
                            if (score > bestScore){
                                bestScore = score;
                            }
                        }
                    }
                }
                return bestScore;
            }
            else {
                bestScore=999;
                for(int i=0;i<SIDE;i++){
                    for(int j=0;j<SIDE;j++){
                        if(board[i][j]=='*'){
                            board[i][j]=HUMANMOVE;
                            score = minimax(board, depth + 1, true);
                            board[i][j]='*';
                            if (score<bestScore){
                                bestScore = score;
                            }
                        }

                    }
                }
                return bestScore;
            }
        }
        else {
            return 0;
        }
    }
}
int bestMove(char board[][SIDE],int moveindex){
    int x=-1,y=-1;
    int score=0;
    int bestScore=-999;
    for(int i=0;i<SIDE;i++){
        for(int j=0;j<SIDE;j++){
            if(board[i][j]=='*'){
                board[i][j]=COMPUTERMOVE;
                score=minimax(board,moveindex+1,false);
                board[i][j] = '*';
                if(score > bestScore){
                    bestScore = score;
                    x = i;
                    y = j;
                }


            }
        }

    }
    return x*3+y;
}
void playTicTacToe(int whoseturn){
    char board[SIDE][SIDE];
    int moveIndex = 0, x = 0, y = 0;
    showInstructions();
    initialise(board);
    cout<<endl;
   
    while(gameOver(board)==false &&moveIndex !=SIDE*SIDE){
        int n;
        if(whoseturn==COMPUTER){
            n=bestMove(board,moveIndex);
            x=n/SIDE;
            y=n%SIDE;
            board[x][y]=COMPUTERMOVE;


            showBoard(board);
            moveIndex++;
            whoseturn=HUMAN;


        }
        else if(whoseturn==HUMAN){
            printf("You can insert in the following positions: ");
            for(int i=0;i<SIDE;i++){
                for(int j=0;j<SIDE;j++){
                    if(board[i][j]=='*'){
                        printf("%d ", (i*3+j)+1);
                    }
                }
            }
            cout<<endl;
            printf("Enter a position: ");
            scanf("%d",&n);
            n--;
            x = n/SIDE;
            y = n%SIDE;
            if(board[x][y]=='*' &&n<9 &&n>=0){
                board[x][y]=HUMANMOVE;
                showBoard(board);
                moveIndex ++;
                whoseturn = COMPUTER;

            }
            else if (board[x][y]!='*'&&n<9 &&n>=0){
                printf("The entered position is occupied please select from the available position ");
                cout<<endl;
                
            }
            else if(n<0 || n>8){
                printf("Invalid position");
            }
            
        }

    }
    if(gameOver(board)==false &&moveIndex==SIDE*SIDE){
        printf("\nIt's draw\n");
    }
    else {
        if(whoseturn==COMPUTER){
            whoseturn=HUMAN;
        }
        else if(whoseturn==HUMAN){
            whoseturn =COMPUTER;
        }
        declarewinner(whoseturn);
    }
    

    

}
int main(){
    
    char cont='y';
    do {
       char choice;
        printf("Do you want to start first?(y/n) : ");
        scanf(" %c", &choice);
        if(choice=='n')
            playTicTacToe(COMPUTER);
        else if(choice=='y')
            playTicTacToe(HUMAN);
        else
            printf("Invalid choice\n");
        printf("\nDo you want to quit(y/n) : ");
        scanf(" %c", &cont);
    }while(cont=='n');
    return 0;

}
